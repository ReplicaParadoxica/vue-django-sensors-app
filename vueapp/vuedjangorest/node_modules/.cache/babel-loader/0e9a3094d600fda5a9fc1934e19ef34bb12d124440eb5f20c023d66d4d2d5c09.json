{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'SensorDetail',\n  data() {\n    return {\n      sensor: {}\n    };\n  },\n  methods: {\n    getSensorDetails() {\n      const id = this.$route.params.id;\n      axios.get(`http://localhost:8000/api/sensors/${id}/`).then(response => {\n        this.sensor = response.data;\n      });\n    }\n  },\n  computed: {\n    formattedMetrics() {\n      // Format the metrics data into a human-readable string\n      const metrics = this.sensor.metrics;\n      if (metrics) {\n        const metricKeys = Object.keys(metrics);\n        const formattedMetrics = metricKeys.map(key => {\n          const unit = metrics[key].unit;\n          const value = metrics[key].values[0].value;\n          return `${key}: ${value} ${unit}`;\n        });\n        return formattedMetrics.join(\", \");\n      }\n      return \"\";\n    }\n  },\n  created() {\n    this.getSensorDetails();\n  }\n};","map":{"version":3,"names":["axios","name","data","sensor","methods","getSensorDetails","id","$route","params","get","then","response","computed","formattedMetrics","metrics","metricKeys","Object","keys","map","key","unit","value","values","join","created"],"sources":["src/views/SensorDetail.vue"],"sourcesContent":["<template>\r\n    <div class=\"container\">\r\n        <h2> Sensor Detail </h2>\r\n        <table>\r\n            <tr>\r\n                <td>Name:</td>\r\n                <td>{{ sensor.name }}</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Metrics:</td>\r\n                <td>{{ formattedMetrics }}</td>\r\n            </tr>\r\n        </table>\r\n    </div>\r\n</template>\r\n  \r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n    name: 'SensorDetail',\r\n    data() {\r\n        return {\r\n            sensor: {},\r\n        };\r\n    },\r\n    methods: {\r\n        getSensorDetails() {\r\n            const id = this.$route.params.id;\r\n            axios.get(`http://localhost:8000/api/sensors/${id}/`).then((response) => {\r\n                this.sensor = response.data;\r\n            });\r\n        },\r\n    },\r\n    computed: {\r\n        formattedMetrics() {\r\n            // Format the metrics data into a human-readable string\r\n            const metrics = this.sensor.metrics;\r\n            if (metrics) {\r\n                const metricKeys = Object.keys(metrics);\r\n                const formattedMetrics = metricKeys.map((key) => {\r\n                    const unit = metrics[key].unit;\r\n                    const value = metrics[key].values[0].value;\r\n                    return `${key}: ${value} ${unit}`;\r\n                });\r\n                return formattedMetrics.join(\", \");\r\n            }\r\n            return \"\";\r\n        },\r\n    },\r\n    created() {\r\n        this.getSensorDetails();\r\n    },\r\n};\r\n</script>\r\n  \r\n<style scoped>\r\ntable,\r\nth,\r\ntd {\r\n    border: 1px solid black;\r\n    border-collapse: collapse;\r\n}\r\n\r\nth,\r\ntd {\r\n    padding: 5px;\r\n}\r\n\r\n.container {\r\n    margin: 20px;\r\n}\r\n</style>\r\n"],"mappings":"AAiBA,OAAAA,KAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,MAAA;IACA;EACA;EACAC,OAAA;IACAC,iBAAA;MACA,MAAAC,EAAA,QAAAC,MAAA,CAAAC,MAAA,CAAAF,EAAA;MACAN,KAAA,CAAAS,GAAA,sCAAAH,EAAA,KAAAI,IAAA,CAAAC,QAAA;QACA,KAAAR,MAAA,GAAAQ,QAAA,CAAAT,IAAA;MACA;IACA;EACA;EACAU,QAAA;IACAC,iBAAA;MACA;MACA,MAAAC,OAAA,QAAAX,MAAA,CAAAW,OAAA;MACA,IAAAA,OAAA;QACA,MAAAC,UAAA,GAAAC,MAAA,CAAAC,IAAA,CAAAH,OAAA;QACA,MAAAD,gBAAA,GAAAE,UAAA,CAAAG,GAAA,CAAAC,GAAA;UACA,MAAAC,IAAA,GAAAN,OAAA,CAAAK,GAAA,EAAAC,IAAA;UACA,MAAAC,KAAA,GAAAP,OAAA,CAAAK,GAAA,EAAAG,MAAA,IAAAD,KAAA;UACA,UAAAF,GAAA,KAAAE,KAAA,IAAAD,IAAA;QACA;QACA,OAAAP,gBAAA,CAAAU,IAAA;MACA;MACA;IACA;EACA;EACAC,QAAA;IACA,KAAAnB,gBAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}