{"ast":null,"code":"export default {\n  data() {\n    return {\n      sensors: [],\n      metrics: [],\n      measurements: [],\n      sortBy: null,\n      sortDesc: false,\n      search: '',\n      sensorTypeFilter: '',\n      visibleMetrics: []\n    };\n  },\n  mounted() {\n    // Fetch data from backend endpoints\n    this.fetchSensors();\n    this.fetchMetrics();\n    this.fetchMeasurements();\n  },\n  computed: {\n    filteredSensors() {\n      return this.sensors.filter(sensor => sensor.name.toLowerCase().includes(this.search.toLowerCase())).filter(sensor => sensor.type.toLowerCase().includes(this.sensorTypeFilter.toLowerCase()));\n    }\n  },\n  methods: {\n    fetchSensors() {\n      // Replace with your Django backend endpoint for sensor list\n      fetch('http://localhost:8000/api/sensors/').then(response => response.json()).then(data => this.sensors = data);\n    },\n    fetchMetrics() {\n      // Replace with your Django backend endpoint for metric list\n      fetch('http://localhost:8000/api/metrics/').then(response => response.json()).then(data => {\n        this.metrics = data;\n        // Initialize visibleMetrics with all metrics\n        this.visibleMetrics = data;\n      });\n    },\n    fetchMeasurements() {\n      // Replace with your Django backend endpoint for measurement list\n      fetch('http://localhost:8000/api/measurements/').then(response => response.json()).then(data => this.measurements = data);\n    },\n    getMetricValue(sensor, metric) {\n      // Find the measurement for the sensor and metric\n      const measurement = this.measurements.find(m => m.sensor_name === sensor.name && m.metric_name === metric.name);\n      if (measurement) {\n        return measurement.value;\n      } else {\n        return 'N/A';\n      }\n    },\n    sortTable(column) {\n      if (this.sortBy === column) {\n        // If same column is clicked, toggle sort direction\n        this.sortDesc = !this.sortDesc;\n      } else {\n        // If different column is clicked, reset sort direction\n        this.sortBy = column;\n        this.sortDesc = false;\n      }\n      const sortMultiplier = this.sortDesc ? -1 : 1;\n      // Sort the sensors array based on the selected column\n      this.filteredSensors.sort((a, b) => {\n        if (a[column] < b[column]) return -1 * sortMultiplier;\n        if (a[column] > b[column]) return 1 * sortMultiplier;\n        return 0;\n      });\n    }\n  },\n  watch: {\n    metrics(newVal, oldVal) {\n      // Update visibleMetrics when metrics change\n      this.visibleMetrics = newVal.filter(metric => metric.show);\n    }\n  }\n};","map":{"version":3,"names":["data","sensors","metrics","measurements","sortBy","sortDesc","search","sensorTypeFilter","visibleMetrics","mounted","fetchSensors","fetchMetrics","fetchMeasurements","computed","filteredSensors","filter","sensor","name","toLowerCase","includes","type","methods","fetch","then","response","json","getMetricValue","metric","measurement","find","m","sensor_name","metric_name","value","sortTable","column","sortMultiplier","sort","a","b","watch","newVal","oldVal","show"],"sources":["src/views/Table.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <h1>Sensor Measurements Table</h1>\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th @click=\"sortTable('sensor_name')\">Sensor Name</th>\r\n                    <th v-for=\"metric in visibleMetrics\" :key=\"metric.id\">\r\n                        {{ metric.name }} ({{ metric.unitName }})\r\n                    </th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr v-for=\"sensor in filteredSensors\" :key=\"sensor.id\">\r\n                    <td>{{ sensor.name }}</td>\r\n                    <td v-for=\"metric in visibleMetrics\" :key=\"metric.id\">\r\n                        {{ getMetricValue(sensor, metric) }}\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n</template>\r\n  \r\n<script>\r\nexport default {\r\n    data() {\r\n        return {\r\n            sensors: [],\r\n            metrics: [],\r\n            measurements: [],\r\n            sortBy: null,\r\n            sortDesc: false,\r\n            search: '',\r\n            sensorTypeFilter: '',\r\n            visibleMetrics: [],\r\n        };\r\n    },\r\n    mounted() {\r\n        // Fetch data from backend endpoints\r\n        this.fetchSensors();\r\n        this.fetchMetrics();\r\n        this.fetchMeasurements();\r\n    },\r\n    computed: {\r\n        filteredSensors() {\r\n            return this.sensors.filter(sensor =>\r\n                sensor.name.toLowerCase().includes(this.search.toLowerCase())\r\n            ).filter(sensor =>\r\n                sensor.type.toLowerCase().includes(this.sensorTypeFilter.toLowerCase())\r\n            );\r\n        },\r\n    },\r\n    methods: {\r\n        fetchSensors() {\r\n            // Replace with your Django backend endpoint for sensor list\r\n            fetch('http://localhost:8000/api/sensors/')\r\n                .then(response => response.json())\r\n                .then(data => (this.sensors = data));\r\n        },\r\n        fetchMetrics() {\r\n            // Replace with your Django backend endpoint for metric list\r\n            fetch('http://localhost:8000/api/metrics/')\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    this.metrics = data;\r\n                    // Initialize visibleMetrics with all metrics\r\n                    this.visibleMetrics = data;\r\n                });\r\n        },\r\n        fetchMeasurements() {\r\n            // Replace with your Django backend endpoint for measurement list\r\n            fetch('http://localhost:8000/api/measurements/')\r\n                .then(response => response.json())\r\n                .then(data => (this.measurements = data));\r\n        },\r\n        getMetricValue(sensor, metric) {\r\n            // Find the measurement for the sensor and metric\r\n            const measurement = this.measurements.find(\r\n                m =>\r\n                    m.sensor_name === sensor.name && m.metric_name === metric.name\r\n            );\r\n            if (measurement) {\r\n                return measurement.value;\r\n            } else {\r\n                return 'N/A';\r\n            }\r\n        },\r\n        sortTable(column) {\r\n            if (this.sortBy === column) {\r\n                // If same column is clicked, toggle sort direction\r\n                this.sortDesc = !this.sortDesc;\r\n            } else {\r\n                // If different column is clicked, reset sort direction\r\n                this.sortBy = column;\r\n                this.sortDesc = false;\r\n            }\r\n            const sortMultiplier = this.sortDesc ? -1 : 1;\r\n            // Sort the sensors array based on the selected column\r\n            this.filteredSensors.sort((a, b) => {\r\n                if (a[column] < b[column]) return -1 * sortMultiplier;\r\n                if (a[column] > b[column]) return 1 * sortMultiplier;\r\n                return 0;\r\n            });\r\n        },\r\n    },\r\n    watch: {\r\n        metrics(newVal, oldVal) {\r\n            // Update visibleMetrics when metrics change\r\n            this.visibleMetrics = newVal.filter(metric => metric.show);\r\n        },\r\n    },\r\n};\r\n</script>\r\n"],"mappings":"AAyBA;EACAA,KAAA;IACA;MACAC,OAAA;MACAC,OAAA;MACAC,YAAA;MACAC,MAAA;MACAC,QAAA;MACAC,MAAA;MACAC,gBAAA;MACAC,cAAA;IACA;EACA;EACAC,QAAA;IACA;IACA,KAAAC,YAAA;IACA,KAAAC,YAAA;IACA,KAAAC,iBAAA;EACA;EACAC,QAAA;IACAC,gBAAA;MACA,YAAAb,OAAA,CAAAc,MAAA,CAAAC,MAAA,IACAA,MAAA,CAAAC,IAAA,CAAAC,WAAA,GAAAC,QAAA,MAAAb,MAAA,CAAAY,WAAA,IACA,CAAAH,MAAA,CAAAC,MAAA,IACAA,MAAA,CAAAI,IAAA,CAAAF,WAAA,GAAAC,QAAA,MAAAZ,gBAAA,CAAAW,WAAA,IACA;IACA;EACA;EACAG,OAAA;IACAX,aAAA;MACA;MACAY,KAAA,uCACAC,IAAA,CAAAC,QAAA,IAAAA,QAAA,CAAAC,IAAA,IACAF,IAAA,CAAAvB,IAAA,SAAAC,OAAA,GAAAD,IAAA;IACA;IACAW,aAAA;MACA;MACAW,KAAA,uCACAC,IAAA,CAAAC,QAAA,IAAAA,QAAA,CAAAC,IAAA,IACAF,IAAA,CAAAvB,IAAA;QACA,KAAAE,OAAA,GAAAF,IAAA;QACA;QACA,KAAAQ,cAAA,GAAAR,IAAA;MACA;IACA;IACAY,kBAAA;MACA;MACAU,KAAA,4CACAC,IAAA,CAAAC,QAAA,IAAAA,QAAA,CAAAC,IAAA,IACAF,IAAA,CAAAvB,IAAA,SAAAG,YAAA,GAAAH,IAAA;IACA;IACA0B,eAAAV,MAAA,EAAAW,MAAA;MACA;MACA,MAAAC,WAAA,QAAAzB,YAAA,CAAA0B,IAAA,CACAC,CAAA,IACAA,CAAA,CAAAC,WAAA,KAAAf,MAAA,CAAAC,IAAA,IAAAa,CAAA,CAAAE,WAAA,KAAAL,MAAA,CAAAV,IAAA,CACA;MACA,IAAAW,WAAA;QACA,OAAAA,WAAA,CAAAK,KAAA;MACA;QACA;MACA;IACA;IACAC,UAAAC,MAAA;MACA,SAAA/B,MAAA,KAAA+B,MAAA;QACA;QACA,KAAA9B,QAAA,SAAAA,QAAA;MACA;QACA;QACA,KAAAD,MAAA,GAAA+B,MAAA;QACA,KAAA9B,QAAA;MACA;MACA,MAAA+B,cAAA,QAAA/B,QAAA;MACA;MACA,KAAAS,eAAA,CAAAuB,IAAA,EAAAC,CAAA,EAAAC,CAAA;QACA,IAAAD,CAAA,CAAAH,MAAA,IAAAI,CAAA,CAAAJ,MAAA,eAAAC,cAAA;QACA,IAAAE,CAAA,CAAAH,MAAA,IAAAI,CAAA,CAAAJ,MAAA,cAAAC,cAAA;QACA;MACA;IACA;EACA;EACAI,KAAA;IACAtC,QAAAuC,MAAA,EAAAC,MAAA;MACA;MACA,KAAAlC,cAAA,GAAAiC,MAAA,CAAA1B,MAAA,CAAAY,MAAA,IAAAA,MAAA,CAAAgB,IAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}