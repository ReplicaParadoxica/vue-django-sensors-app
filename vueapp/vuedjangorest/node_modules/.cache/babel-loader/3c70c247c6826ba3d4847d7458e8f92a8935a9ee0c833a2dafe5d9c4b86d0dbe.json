{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'MeasurementList',\n  data() {\n    return {\n      measurements: [],\n      sortBy: null,\n      sortDesc: false,\n      searchText: '',\n      showSensorName: true,\n      showMetricName: true,\n      showUnitName: true,\n      showUnitPrecision: true,\n      showValue: true\n    };\n  },\n  methods: {\n    loadMeasurements() {\n      axios.get('http://127.0.0.1:8000/api/measurements/').then(response => {\n        this.measurements = response.data;\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n    sort(column) {\n      if (this.sortBy === column) {\n        this.sortDesc = !this.sortDesc;\n      } else {\n        this.sortBy = column;\n        this.sortDesc = false;\n      }\n      this.measurements.sort((a, b) => {\n        let aValue = a[this.sortBy];\n        let bValue = b[this.sortBy];\n        if (typeof aValue === 'string' && typeof bValue === 'string') {\n          aValue = aValue.toLowerCase();\n          bValue = bValue.toLowerCase();\n        }\n        if (aValue === bValue) {\n          return 0;\n        }\n        if (this.sortDesc) {\n          return aValue > bValue ? -1 : 1;\n        } else {\n          return aValue < bValue ? -1 : 1;\n        }\n      });\n    }\n  },\n  computed: {\n    filteredMeasurements() {\n      return this.measurements.filter(measurement => {\n        const searchTextLower = this.searchText.toLowerCase();\n        return measurement.sensor_name.toLowerCase().includes(searchTextLower) || measurement.metric_name.toLowerCase().includes(searchTextLower) || measurement.unit_name.toLowerCase().includes(searchTextLower);\n      });\n    }\n  },\n  mounted() {\n    this.loadMeasurements();\n  }\n};","map":{"version":3,"names":["axios","name","data","measurements","sortBy","sortDesc","searchText","showSensorName","showMetricName","showUnitName","showUnitPrecision","showValue","methods","loadMeasurements","get","then","response","catch","error","console","log","sort","column","a","b","aValue","bValue","toLowerCase","computed","filteredMeasurements","filter","measurement","searchTextLower","sensor_name","includes","metric_name","unit_name","mounted"],"sources":["src/views/UnitsList.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <h2>Measurements</h2>\r\n        <div class=\"search-container\">\r\n            <input v-model=\"searchText\" type=\"text\" placeholder=\"Search by metric name\">\r\n        </div>\r\n        <div class=\"measurement-checkboxes\">\r\n            <label>\r\n                <input type=\"checkbox\" v-model=\"showSensorName\"> Sensor Name\r\n            </label>\r\n            <label>\r\n                <input type=\"checkbox\" v-model=\"showMetricName\"> Metric Name\r\n            </label>\r\n            <label>\r\n                <input type=\"checkbox\" v-model=\"showUnitName\"> Unit Name\r\n            </label>\r\n            <label>\r\n                <input type=\"checkbox\" v-model=\"showUnitPrecision\"> Unit Precision\r\n            </label>\r\n            <label>\r\n                <input type=\"checkbox\" v-model=\"showValue\"> Value\r\n            </label>\r\n        </div>\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th v-if=\"showSensorName\" @click=\"sort('sensor_name')\">Sensor Name</th>\r\n                    <th v-if=\"showMetricName\" @click=\"sort('metric_name')\">Metric Name</th>\r\n                    <th v-if=\"showUnitName\" @click=\"sort('unit_name')\">Unit Name</th>\r\n                    <th v-if=\"showUnitPrecision\" @click=\"sort('unit_precision')\">Unit Precision</th>\r\n                    <th v-if=\"showValue\" @click=\"sort('value')\">Value</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr v-for=\"(measurement, index) in filteredMeasurements\" :key=\"index\">\r\n                    <td v-if=\"showSensorName\">{{ measurement.sensor_name }}</td>\r\n                    <td v-if=\"showMetricName\">{{ measurement.metric_name }}</td>\r\n                    <td v-if=\"showUnitName\">{{ measurement.unit_name }}</td>\r\n                    <td v-if=\"showUnitPrecision\">{{ measurement.unit_precision }}</td>\r\n                    <td v-if=\"showValue\">{{ measurement.value }}</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n</template>\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n    name: 'MeasurementList',\r\n    data() {\r\n        return {\r\n            measurements: [],\r\n            sortBy: null,\r\n            sortDesc: false,\r\n            searchText: '',\r\n            showSensorName: true,\r\n            showMetricName: true,\r\n            showUnitName: true,\r\n            showUnitPrecision: true,\r\n            showValue: true,\r\n        };\r\n    },\r\n    methods: {\r\n        loadMeasurements() {\r\n            axios\r\n                .get('http://127.0.0.1:8000/api/measurements/')\r\n                .then((response) => {\r\n                    this.measurements = response.data;\r\n                })\r\n                .catch((error) => {\r\n                    console.log(error);\r\n                });\r\n        },\r\n        sort(column) {\r\n            if (this.sortBy === column) {\r\n                this.sortDesc = !this.sortDesc;\r\n            } else {\r\n                this.sortBy = column;\r\n                this.sortDesc = false;\r\n            }\r\n\r\n            this.measurements.sort((a, b) => {\r\n                let aValue = a[this.sortBy];\r\n                let bValue = b[this.sortBy];\r\n\r\n                if (typeof aValue === 'string' && typeof bValue === 'string') {\r\n                    aValue = aValue.toLowerCase();\r\n                    bValue = bValue.toLowerCase();\r\n                }\r\n\r\n                if (aValue === bValue) {\r\n                    return 0;\r\n                } if (this.sortDesc) {\r\n                    return aValue > bValue ? -1 : 1;\r\n                } else {\r\n                    return aValue < bValue ? -1 : 1;\r\n                }\r\n            });\r\n        },\r\n    },\r\n    computed: {\r\n        filteredMeasurements() {\r\n            return this.measurements.filter((measurement) => {\r\n                const searchTextLower = this.searchText.toLowerCase();\r\n                return (\r\n                    measurement.sensor_name.toLowerCase().includes(searchTextLower) ||\r\n                    measurement.metric_name.toLowerCase().includes(searchTextLower) ||\r\n                    measurement.unit_name.toLowerCase().includes(searchTextLower)\r\n                );\r\n            });\r\n        },\r\n    },\r\n    mounted() {\r\n        this.loadMeasurements();\r\n    },\r\n};\r\n</script>"],"mappings":"AA8CA,OAAAA,KAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,YAAA;MACAC,MAAA;MACAC,QAAA;MACAC,UAAA;MACAC,cAAA;MACAC,cAAA;MACAC,YAAA;MACAC,iBAAA;MACAC,SAAA;IACA;EACA;EACAC,OAAA;IACAC,iBAAA;MACAb,KAAA,CACAc,GAAA,4CACAC,IAAA,CAAAC,QAAA;QACA,KAAAb,YAAA,GAAAa,QAAA,CAAAd,IAAA;MACA,GACAe,KAAA,CAAAC,KAAA;QACAC,OAAA,CAAAC,GAAA,CAAAF,KAAA;MACA;IACA;IACAG,KAAAC,MAAA;MACA,SAAAlB,MAAA,KAAAkB,MAAA;QACA,KAAAjB,QAAA,SAAAA,QAAA;MACA;QACA,KAAAD,MAAA,GAAAkB,MAAA;QACA,KAAAjB,QAAA;MACA;MAEA,KAAAF,YAAA,CAAAkB,IAAA,EAAAE,CAAA,EAAAC,CAAA;QACA,IAAAC,MAAA,GAAAF,CAAA,MAAAnB,MAAA;QACA,IAAAsB,MAAA,GAAAF,CAAA,MAAApB,MAAA;QAEA,WAAAqB,MAAA,wBAAAC,MAAA;UACAD,MAAA,GAAAA,MAAA,CAAAE,WAAA;UACAD,MAAA,GAAAA,MAAA,CAAAC,WAAA;QACA;QAEA,IAAAF,MAAA,KAAAC,MAAA;UACA;QACA;QAAA,SAAArB,QAAA;UACA,OAAAoB,MAAA,GAAAC,MAAA;QACA;UACA,OAAAD,MAAA,GAAAC,MAAA;QACA;MACA;IACA;EACA;EACAE,QAAA;IACAC,qBAAA;MACA,YAAA1B,YAAA,CAAA2B,MAAA,CAAAC,WAAA;QACA,MAAAC,eAAA,QAAA1B,UAAA,CAAAqB,WAAA;QACA,OACAI,WAAA,CAAAE,WAAA,CAAAN,WAAA,GAAAO,QAAA,CAAAF,eAAA,KACAD,WAAA,CAAAI,WAAA,CAAAR,WAAA,GAAAO,QAAA,CAAAF,eAAA,KACAD,WAAA,CAAAK,SAAA,CAAAT,WAAA,GAAAO,QAAA,CAAAF,eAAA;MAEA;IACA;EACA;EACAK,QAAA;IACA,KAAAxB,gBAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}