{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'SensorList',\n  data() {\n    return {\n      sensors: [],\n      sortColumn: '',\n      sortDirection: 'asc',\n      searchQuery: '',\n      filterType: '',\n      showMetricColumns: true\n    };\n  },\n  computed: {\n    filteredSensors() {\n      let filteredSensors = this.sensors;\n      if (this.searchQuery) {\n        filteredSensors = filteredSensors.filter(sensor => sensor.name.toLowerCase().includes(this.searchQuery.toLowerCase()));\n      }\n      if (this.filterType) {\n        filteredSensors = filteredSensors.filter(sensor => sensor.type === this.filterType);\n      }\n      return filteredSensors;\n    }\n  },\n  methods: {\n    loadSensors() {\n      axios.get('http://localhost:8000/api/sensors/').then(response => {\n        this.sensors = response.data;\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n    deleteSensor(pk) {\n      axios.delete(`http://localhost:8000/api/sensors/${pk}/`).then(response => {\n        this.loadSensors();\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n    sortColumn(column) {\n      if (this.sortColumn === column) {\n        this.sortDirection = this.sortDirection === 'asc' ? 'desc' : 'asc';\n      } else {\n        this.sortColumn = column;\n        this.sortDirection = 'asc';\n      }\n    },\n    toggleMetricColumns() {\n      this.showMetricColumns = !this.showMetricColumns;\n    }\n  },\n  mounted() {\n    this.loadSensors();\n  }\n};","map":{"version":3,"names":["axios","name","data","sensors","sortColumn","sortDirection","searchQuery","filterType","showMetricColumns","computed","filteredSensors","filter","sensor","toLowerCase","includes","type","methods","loadSensors","get","then","response","catch","error","console","log","deleteSensor","pk","delete","column","toggleMetricColumns","mounted"],"sources":["src/views/Table.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <h2>Sensors</h2>\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th @click=\"sortColumn('id')\">id</th>\r\n                    <th @click=\"sortColumn('name')\">Name</th>\r\n                    <th @click=\"sortColumn('type')\">Type</th>\r\n                    <th @click=\"sortColumn('variant')\">Variant</th>\r\n                    <th>Actions</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr v-for=\"(sensor, index) in filteredSensors\" :key=\"index\">\r\n                    <td>{{ sensor.id }}</td>\r\n                    <td>{{ sensor.name }}</td>\r\n                    <td>{{ sensor.type }}</td>\r\n                    <td>{{ sensor.variant }}</td>\r\n                    <td>\r\n                        <router-link :to=\"{ path: `/api/sensors/${sensor.id}/` }\" class=\"view-link\">\r\n                            View\r\n                        </router-link>\r\n                        <button @click=\"deleteSensor(sensor.id)\" class=\"delete-button\">Delete</button>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n    name: 'SensorList',\r\n    data() {\r\n        return {\r\n            sensors: [],\r\n            sortColumn: '',\r\n            sortDirection: 'asc',\r\n            searchQuery: '',\r\n            filterType: '',\r\n            showMetricColumns: true,\r\n        };\r\n    },\r\n    computed: {\r\n        filteredSensors() {\r\n            let filteredSensors = this.sensors;\r\n            if (this.searchQuery) {\r\n                filteredSensors = filteredSensors.filter(sensor => sensor.name.toLowerCase().includes(this.searchQuery.toLowerCase()));\r\n            }\r\n            if (this.filterType) {\r\n                filteredSensors = filteredSensors.filter(sensor => sensor.type === this.filterType);\r\n            }\r\n            return filteredSensors;\r\n        },\r\n    },\r\n    methods: {\r\n        loadSensors() {\r\n            axios\r\n                .get('http://localhost:8000/api/sensors/')\r\n                .then((response) => {\r\n                    this.sensors = response.data;\r\n                })\r\n                .catch((error) => {\r\n                    console.log(error);\r\n                });\r\n        },\r\n        deleteSensor(pk) {\r\n            axios\r\n                .delete(`http://localhost:8000/api/sensors/${pk}/`)\r\n                .then((response) => {\r\n                    this.loadSensors();\r\n                })\r\n                .catch((error) => {\r\n                    console.log(error);\r\n                });\r\n        },\r\n        sortColumn(column) {\r\n            if (this.sortColumn === column) {\r\n                this.sortDirection = this.sortDirection === 'asc' ? 'desc' : 'asc';\r\n            } else {\r\n                this.sortColumn = column;\r\n                this.sortDirection = 'asc';\r\n            }\r\n        },\r\n        toggleMetricColumns() {\r\n            this.showMetricColumns = !this.showMetricColumns;\r\n        },\r\n    },\r\n    mounted() {\r\n        this.loadSensors();\r\n    },\r\n};\r\n</script>\r\n\r\n\r\n<style scoped>\r\n/* Add your styles here */\r\nh2 {\r\n    font-size: 24px;\r\n    font-weight: bold;\r\n    margin-bottom: 16px;\r\n}\r\n\r\ntable {\r\n    width: 100%;\r\n    border-collapse: collapse;\r\n}\r\n\r\nth,\r\ntd {\r\n    padding: 8px;\r\n    text-align: left;\r\n    border: 1px solid #ccc;\r\n}\r\n\r\ntr:nth-child(even) {\r\n    background-color: #f9f9f9;\r\n}\r\n\r\ntr:hover {\r\n    background-color: #f2f2f2;\r\n}\r\n\r\n.view-link,\r\n.delete-button {\r\n    margin-right: 8px;\r\n    cursor: pointer;\r\n    color: #007bff;\r\n    text-decoration: none;\r\n}\r\n\r\n.view-link:hover,\r\n.delete-button:hover {\r\n    color: #0056b3;\r\n}\r\n</style>\r\n"],"mappings":"AAgCA,OAAAA,KAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,OAAA;MACAC,UAAA;MACAC,aAAA;MACAC,WAAA;MACAC,UAAA;MACAC,iBAAA;IACA;EACA;EACAC,QAAA;IACAC,gBAAA;MACA,IAAAA,eAAA,QAAAP,OAAA;MACA,SAAAG,WAAA;QACAI,eAAA,GAAAA,eAAA,CAAAC,MAAA,CAAAC,MAAA,IAAAA,MAAA,CAAAX,IAAA,CAAAY,WAAA,GAAAC,QAAA,MAAAR,WAAA,CAAAO,WAAA;MACA;MACA,SAAAN,UAAA;QACAG,eAAA,GAAAA,eAAA,CAAAC,MAAA,CAAAC,MAAA,IAAAA,MAAA,CAAAG,IAAA,UAAAR,UAAA;MACA;MACA,OAAAG,eAAA;IACA;EACA;EACAM,OAAA;IACAC,YAAA;MACAjB,KAAA,CACAkB,GAAA,uCACAC,IAAA,CAAAC,QAAA;QACA,KAAAjB,OAAA,GAAAiB,QAAA,CAAAlB,IAAA;MACA,GACAmB,KAAA,CAAAC,KAAA;QACAC,OAAA,CAAAC,GAAA,CAAAF,KAAA;MACA;IACA;IACAG,aAAAC,EAAA;MACA1B,KAAA,CACA2B,MAAA,sCAAAD,EAAA,KACAP,IAAA,CAAAC,QAAA;QACA,KAAAH,WAAA;MACA,GACAI,KAAA,CAAAC,KAAA;QACAC,OAAA,CAAAC,GAAA,CAAAF,KAAA;MACA;IACA;IACAlB,WAAAwB,MAAA;MACA,SAAAxB,UAAA,KAAAwB,MAAA;QACA,KAAAvB,aAAA,QAAAA,aAAA;MACA;QACA,KAAAD,UAAA,GAAAwB,MAAA;QACA,KAAAvB,aAAA;MACA;IACA;IACAwB,oBAAA;MACA,KAAArB,iBAAA,SAAAA,iBAAA;IACA;EACA;EACAsB,QAAA;IACA,KAAAb,WAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}