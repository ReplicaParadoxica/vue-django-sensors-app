{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'SensorList',\n  data() {\n    return {\n      sensors: [],\n      sortBy: null,\n      sortDesc: false,\n      searchText: '',\n      showId: true,\n      showName: true,\n      showType: true,\n      showVariant: true,\n      showActions: true\n    };\n  },\n  methods: {\n    loadSensors() {\n      axios.get('http://localhost:8000/api/sensors/').then(response => {\n        this.sensors = response.data;\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n    sort(column) {\n      if (this.sortBy === column) {\n        this.sortDesc = !this.sortDesc;\n      } else {\n        this.sortBy = column;\n        this.sortDesc = false;\n      }\n      this.sensors.sort((a, b) => {\n        let aValue = a[this.sortBy];\n        let bValue = b[this.sortBy];\n        if (typeof aValue === 'string' && typeof bValue === 'string') {\n          aValue = aValue.toLowerCase();\n          bValue = bValue.toLowerCase();\n        }\n        if (aValue === bValue) {\n          return 0;\n        }\n        if (this.sortDesc) {\n          return aValue > bValue ? -1 : 1;\n        } else {\n          return aValue < bValue ? -1 : 1;\n        }\n      });\n    }\n  },\n  computed: {\n    filteredSensors() {\n      let filtered = this.sensors.filter(sensor => {\n        let searchRegex = new RegExp(this.searchText, 'i');\n        return sensor.name.match(searchRegex) || sensor.type.match(searchRegex) || sensor.variant.match(searchRegex) || sensor.id.toString().match(searchRegex);\n      });\n      return filtered;\n    }\n  },\n  mounted() {\n    this.loadSensors();\n  }\n};","map":{"version":3,"names":["axios","name","data","sensors","sortBy","sortDesc","searchText","showId","showName","showType","showVariant","showActions","methods","loadSensors","get","then","response","catch","error","console","log","sort","column","a","b","aValue","bValue","toLowerCase","computed","filteredSensors","filtered","filter","sensor","searchRegex","RegExp","match","type","variant","id","toString","mounted"],"sources":["src/views/Table.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <h2>Sensors</h2>\r\n        <div class=\"search-container\">\r\n            <input v-model=\"searchText\" type=\"text\" placeholder=\"Search by sensor name\">\r\n        </div>\r\n        <div class=\"metric-checkboxes\">\r\n            <label>\r\n                <input type=\"checkbox\" v-model=\"showId\"> ID\r\n            </label>\r\n            <label>\r\n                <input type=\"checkbox\" v-model=\"showName\"> Name\r\n            </label>\r\n            <label>\r\n                <input type=\"checkbox\" v-model=\"showType\"> Type\r\n            </label>\r\n            <label>\r\n                <input type=\"checkbox\" v-model=\"showVariant\"> Variant\r\n            </label>\r\n            <label>\r\n                <input type=\"checkbox\" v-model=\"showActions\"> Actions\r\n            </label>\r\n        </div>\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th v-if=\"showId\" @click=\"sort('id')\">ID</th>\r\n                    <th v-if=\"showName\" @click=\"sort('name')\">Name</th>\r\n                    <th v-if=\"showType\" @click=\"sort('type')\">Type</th>\r\n                    <th v-if=\"showVariant\" @click=\"sort('variant')\">Variant</th>\r\n                    <th v-if=\"showActions\">Actions</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr v-for=\"(sensor, index) in filteredSensors\" :key=\"index\">\r\n                    <td v-if=\"showId\">{{ sensor.id }}</td>\r\n                    <td v-if=\"showName\">{{ sensor.name }}</td>\r\n                    <td v-if=\"showType\">{{ sensor.type }}</td>\r\n                    <td v-if=\"showVariant\">{{ sensor.variant }}</td>\r\n                    <td v-if=\"showActions\">\r\n                        <router-link :to=\"{ path: `/api/sensors/${sensor.id}/` }\" class=\"view-link\">\r\n                            View\r\n                        </router-link>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n</template>\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n    name: 'SensorList',\r\n    data() {\r\n        return {\r\n            sensors: [],\r\n            sortBy: null,\r\n            sortDesc: false,\r\n            searchText: '',\r\n            showId: true,\r\n            showName: true,\r\n            showType: true,\r\n            showVariant: true,\r\n            showActions: true,\r\n        };\r\n    },\r\n    methods: {\r\n        loadSensors() {\r\n            axios\r\n                .get('http://localhost:8000/api/sensors/')\r\n                .then((response) => {\r\n                    this.sensors = response.data;\r\n                })\r\n                .catch((error) => {\r\n                    console.log(error);\r\n                });\r\n        },\r\n        sort(column) {\r\n            if (this.sortBy === column) {\r\n                this.sortDesc = !this.sortDesc;\r\n            } else {\r\n                this.sortBy = column;\r\n                this.sortDesc = false;\r\n            }\r\n\r\n            this.sensors.sort((a, b) => {\r\n                let aValue = a[this.sortBy];\r\n                let bValue = b[this.sortBy];\r\n\r\n                if (typeof aValue === 'string' && typeof bValue === 'string') {\r\n                    aValue = aValue.toLowerCase();\r\n                    bValue = bValue.toLowerCase();\r\n                }\r\n\r\n                if (aValue === bValue) {\r\n                    return 0;\r\n                } if (this.sortDesc) {\r\n                    return aValue > bValue ? -1 : 1;\r\n                } else {\r\n                    return aValue < bValue ? -1 : 1;\r\n                }\r\n            });\r\n        },\r\n    },\r\n    computed: {\r\n        filteredSensors() {\r\n            let filtered = this.sensors.filter((sensor) => {\r\n                let searchRegex = new RegExp(this.searchText, 'i');\r\n                return (\r\n                    sensor.name.match(searchRegex) ||\r\n                    sensor.type.match(searchRegex) ||\r\n                    sensor.variant.match(searchRegex) ||\r\n                    sensor.id.toString().match(searchRegex)\r\n                );\r\n            });\r\n            return filtered;\r\n        },\r\n\r\n    },\r\n    mounted() {\r\n        this.loadSensors();\r\n    },\r\n};\r\n</script>\r\n\r\n  \r\n\r\n<style scoped>\r\n/* Add your styles here */\r\n\r\nh2 {\r\n    font-size: 24px;\r\n    font-weight: bold;\r\n    margin-bottom: 16px;\r\n}\r\n\r\n.search-container {\r\n    margin-bottom: 16px;\r\n}\r\n\r\ntable {\r\n    width: 100%;\r\n    border-collapse: collapse;\r\n}\r\n\r\nth,\r\ntd {\r\n    padding: 8px;\r\n    text-align: left;\r\n    border: 1px solid #ccc;\r\n}\r\n\r\ntr:nth-child(even) {\r\n    background-color: #f9f9f9;\r\n}\r\n\r\ntr:hover {\r\n    background-color: #f2f2f2;\r\n}\r\n\r\ninput[type=\"text\"] {\r\n    padding: 8px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 4px;\r\n    font-size: 13px;\r\n    width: 10%;\r\n    box-sizing: border-box;\r\n}\r\n\r\n/* Styling for checkboxes */\r\n.metric-checkboxes {\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    margin-bottom: 16px;\r\n}\r\n\r\n.metric-checkboxes label {\r\n    margin-right: 16px;\r\n}\r\n\r\n.metric-checkboxes input[type=\"checkbox\"] {\r\n    margin-right: 8px;\r\n}\r\n</style>\r\n"],"mappings":"AAkDA,OAAAA,KAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,OAAA;MACAC,MAAA;MACAC,QAAA;MACAC,UAAA;MACAC,MAAA;MACAC,QAAA;MACAC,QAAA;MACAC,WAAA;MACAC,WAAA;IACA;EACA;EACAC,OAAA;IACAC,YAAA;MACAb,KAAA,CACAc,GAAA,uCACAC,IAAA,CAAAC,QAAA;QACA,KAAAb,OAAA,GAAAa,QAAA,CAAAd,IAAA;MACA,GACAe,KAAA,CAAAC,KAAA;QACAC,OAAA,CAAAC,GAAA,CAAAF,KAAA;MACA;IACA;IACAG,KAAAC,MAAA;MACA,SAAAlB,MAAA,KAAAkB,MAAA;QACA,KAAAjB,QAAA,SAAAA,QAAA;MACA;QACA,KAAAD,MAAA,GAAAkB,MAAA;QACA,KAAAjB,QAAA;MACA;MAEA,KAAAF,OAAA,CAAAkB,IAAA,EAAAE,CAAA,EAAAC,CAAA;QACA,IAAAC,MAAA,GAAAF,CAAA,MAAAnB,MAAA;QACA,IAAAsB,MAAA,GAAAF,CAAA,MAAApB,MAAA;QAEA,WAAAqB,MAAA,wBAAAC,MAAA;UACAD,MAAA,GAAAA,MAAA,CAAAE,WAAA;UACAD,MAAA,GAAAA,MAAA,CAAAC,WAAA;QACA;QAEA,IAAAF,MAAA,KAAAC,MAAA;UACA;QACA;QAAA,SAAArB,QAAA;UACA,OAAAoB,MAAA,GAAAC,MAAA;QACA;UACA,OAAAD,MAAA,GAAAC,MAAA;QACA;MACA;IACA;EACA;EACAE,QAAA;IACAC,gBAAA;MACA,IAAAC,QAAA,QAAA3B,OAAA,CAAA4B,MAAA,CAAAC,MAAA;QACA,IAAAC,WAAA,OAAAC,MAAA,MAAA5B,UAAA;QACA,OACA0B,MAAA,CAAA/B,IAAA,CAAAkC,KAAA,CAAAF,WAAA,KACAD,MAAA,CAAAI,IAAA,CAAAD,KAAA,CAAAF,WAAA,KACAD,MAAA,CAAAK,OAAA,CAAAF,KAAA,CAAAF,WAAA,KACAD,MAAA,CAAAM,EAAA,CAAAC,QAAA,GAAAJ,KAAA,CAAAF,WAAA;MAEA;MACA,OAAAH,QAAA;IACA;EAEA;EACAU,QAAA;IACA,KAAA3B,WAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}