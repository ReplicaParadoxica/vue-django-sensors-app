{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      sensors: [],\n      metrics: [],\n      selectedMetrics: [],\n      search: '',\n      sortKey: '',\n      sortDirection: 1\n    };\n  },\n  created() {\n    axios.get('localhost:8000/api/sensors/').then(response => {\n      this.sensors = response.data;\n    });\n    axios.get('localhost:8000/api/metrics/').then(response => {\n      this.metrics = response.data;\n      this.selectedMetrics = this.metrics.map(metric => metric.name);\n    });\n  },\n  computed: {\n    filteredSensors() {\n      let filteredSensors = this.sensors.filter(sensor => sensor.name.toLowerCase().includes(this.search.toLowerCase()));\n      if (this.$route.query.sensor_type) {\n        filteredSensors = filteredSensors.filter(sensor => sensor.type === this.$route.query.sensor_type);\n      }\n      if (this.sortKey) {\n        filteredSensors = filteredSensors.sort((a, b) => {\n          let sortValueA = a.metrics[this.sortKey];\n          let sortValueB = b.metrics[this.sortKey];\n          if (sortValueA === undefined) {\n            sortValueA = Number.NEGATIVE_INFINITY;\n          }\n          if (sortValueB === undefined) {\n            sortValueB = Number.NEGATIVE_INFINITY;\n          }\n          if (sortValueA < sortValueB) {\n            return -1 * this.sortDirection;\n          }\n          if (sortValueA > sortValueB) {\n            return 1 * this.sortDirection;\n          }\n          return 0;\n        });\n      }\n      return filteredSensors;\n    }\n  },\n  methods: {\n    sortBy(sortKey) {\n      if (sortKey === this.sortKey) {\n        this.sortDirection *= -1;\n      } else {\n        this.sortDirection = 1;\n        this.sortKey = sortKey;\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","sensors","metrics","selectedMetrics","search","sortKey","sortDirection","created","get","then","response","map","metric","name","computed","filteredSensors","filter","sensor","toLowerCase","includes","$route","query","sensor_type","type","sort","a","b","sortValueA","sortValueB","undefined","Number","NEGATIVE_INFINITY","methods","sortBy"],"sources":["src/views/Table.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th>\r\n                        <button @click=\"sortBy('sensor_name')\">Sensor name</button>\r\n                    </th>\r\n                    <th v-for=\"metric in metrics\" :key=\"metric.name\">\r\n                        <button @click=\"sortBy(metric.name)\">{{ metric.name }} ({{ metric.unit }})</button>\r\n                    </th>\r\n                </tr>\r\n                <tr>\r\n                    <th>\r\n                        <input v-model=\"search\" placeholder=\"Search sensor name\" />\r\n                    </th>\r\n                    <th v-for=\"metric in metrics\" :key=\"metric.name\">\r\n                        <input type=\"checkbox\" v-model=\"selectedMetrics\" :value=\"metric.name\" /> {{ metric.name }}\r\n                        ({{ metric.unit }})\r\n                    </th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr v-for=\"sensor in filteredSensors\" :key=\"sensor.name\">\r\n                    <td>{{ sensor.name }}</td>\r\n                    <td v-for=\"metric in selectedMetrics\" :key=\"metric\">\r\n                        {{ sensor.metrics[metric] }}\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n</template>\r\n  \r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n    data() {\r\n        return {\r\n            sensors: [],\r\n            metrics: [],\r\n            selectedMetrics: [],\r\n            search: '',\r\n            sortKey: '',\r\n            sortDirection: 1\r\n        };\r\n    },\r\n    created() {\r\n        axios.get('localhost:8000/api/sensors/').then(response => {\r\n            this.sensors = response.data;\r\n        });\r\n        axios.get('localhost:8000/api/metrics/').then(response => {\r\n            this.metrics = response.data;\r\n            this.selectedMetrics = this.metrics.map(metric => metric.name);\r\n        });\r\n    },\r\n    computed: {\r\n        filteredSensors() {\r\n            let filteredSensors = this.sensors.filter(sensor =>\r\n                sensor.name.toLowerCase().includes(this.search.toLowerCase())\r\n            );\r\n            if (this.$route.query.sensor_type) {\r\n                filteredSensors = filteredSensors.filter(\r\n                    sensor => sensor.type === this.$route.query.sensor_type\r\n                );\r\n            }\r\n            if (this.sortKey) {\r\n                filteredSensors = filteredSensors.sort((a, b) => {\r\n                    let sortValueA = a.metrics[this.sortKey];\r\n                    let sortValueB = b.metrics[this.sortKey];\r\n                    if (sortValueA === undefined) {\r\n                        sortValueA = Number.NEGATIVE_INFINITY;\r\n                    }\r\n                    if (sortValueB === undefined) {\r\n                        sortValueB = Number.NEGATIVE_INFINITY;\r\n                    }\r\n                    if (sortValueA < sortValueB) {\r\n                        return -1 * this.sortDirection;\r\n                    }\r\n                    if (sortValueA > sortValueB) {\r\n                        return 1 * this.sortDirection;\r\n                    }\r\n                    return 0;\r\n                });\r\n            }\r\n            return filteredSensors;\r\n        }\r\n    },\r\n    methods: {\r\n        sortBy(sortKey) {\r\n            if (sortKey === this.sortKey) {\r\n                this.sortDirection *= -1;\r\n            } else {\r\n                this.sortDirection = 1;\r\n                this.sortKey = sortKey;\r\n            }\r\n        }\r\n    }\r\n};\r\n</script>\r\n  "],"mappings":"AAmCA,OAAAA,KAAA;AAEA;EACAC,KAAA;IACA;MACAC,OAAA;MACAC,OAAA;MACAC,eAAA;MACAC,MAAA;MACAC,OAAA;MACAC,aAAA;IACA;EACA;EACAC,QAAA;IACAR,KAAA,CAAAS,GAAA,gCAAAC,IAAA,CAAAC,QAAA;MACA,KAAAT,OAAA,GAAAS,QAAA,CAAAV,IAAA;IACA;IACAD,KAAA,CAAAS,GAAA,gCAAAC,IAAA,CAAAC,QAAA;MACA,KAAAR,OAAA,GAAAQ,QAAA,CAAAV,IAAA;MACA,KAAAG,eAAA,QAAAD,OAAA,CAAAS,GAAA,CAAAC,MAAA,IAAAA,MAAA,CAAAC,IAAA;IACA;EACA;EACAC,QAAA;IACAC,gBAAA;MACA,IAAAA,eAAA,QAAAd,OAAA,CAAAe,MAAA,CAAAC,MAAA,IACAA,MAAA,CAAAJ,IAAA,CAAAK,WAAA,GAAAC,QAAA,MAAAf,MAAA,CAAAc,WAAA,IACA;MACA,SAAAE,MAAA,CAAAC,KAAA,CAAAC,WAAA;QACAP,eAAA,GAAAA,eAAA,CAAAC,MAAA,CACAC,MAAA,IAAAA,MAAA,CAAAM,IAAA,UAAAH,MAAA,CAAAC,KAAA,CAAAC,WAAA,CACA;MACA;MACA,SAAAjB,OAAA;QACAU,eAAA,GAAAA,eAAA,CAAAS,IAAA,EAAAC,CAAA,EAAAC,CAAA;UACA,IAAAC,UAAA,GAAAF,CAAA,CAAAvB,OAAA,MAAAG,OAAA;UACA,IAAAuB,UAAA,GAAAF,CAAA,CAAAxB,OAAA,MAAAG,OAAA;UACA,IAAAsB,UAAA,KAAAE,SAAA;YACAF,UAAA,GAAAG,MAAA,CAAAC,iBAAA;UACA;UACA,IAAAH,UAAA,KAAAC,SAAA;YACAD,UAAA,GAAAE,MAAA,CAAAC,iBAAA;UACA;UACA,IAAAJ,UAAA,GAAAC,UAAA;YACA,iBAAAtB,aAAA;UACA;UACA,IAAAqB,UAAA,GAAAC,UAAA;YACA,gBAAAtB,aAAA;UACA;UACA;QACA;MACA;MACA,OAAAS,eAAA;IACA;EACA;EACAiB,OAAA;IACAC,OAAA5B,OAAA;MACA,IAAAA,OAAA,UAAAA,OAAA;QACA,KAAAC,aAAA;MACA;QACA,KAAAA,aAAA;QACA,KAAAD,OAAA,GAAAA,OAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}