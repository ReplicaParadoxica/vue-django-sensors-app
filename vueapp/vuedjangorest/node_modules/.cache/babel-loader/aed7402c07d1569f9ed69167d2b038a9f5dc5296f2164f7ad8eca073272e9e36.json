{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      sensors: [],\n      metrics: [],\n      measurements: [],\n      activeMetrics: [],\n      searchSensorName: '',\n      filterSensorType: ''\n    };\n  },\n  mounted() {\n    // Fetch data from backend endpoints\n    this.fetchSensors();\n    this.fetchMetrics();\n    this.fetchMeasurements();\n  },\n  computed: {\n    filteredSensors() {\n      let filtered = this.sensors;\n      if (this.searchSensorName) {\n        filtered = filtered.filter(sensor => sensor.name.toLowerCase().includes(this.searchSensorName.toLowerCase()));\n      }\n      if (this.filterSensorType) {\n        filtered = filtered.filter(sensor => sensor.type.toLowerCase() === this.filterSensorType.toLowerCase());\n      }\n      return filtered;\n    }\n  },\n  methods: {\n    fetchSensors() {\n      // Replace with your Django backend endpoint for sensor list\n      axios.get('http://localhost:8000/api/sensors/').then(response => {\n        this.sensors = response.data;\n      }).catch(error => {\n        console.error('Error fetching sensors:', error);\n      });\n    },\n    fetchMetrics() {\n      // Replace with your Django backend endpoint for metric list\n      axios.get('http://localhost:8000/api/metrics/').then(response => {\n        this.metrics = response.data;\n        this.activeMetrics = response.data.filter(metric => metric.selected);\n      }).catch(error => {\n        console.error('Error fetching metrics:', error);\n      });\n    },\n    fetchMeasurements() {\n      // Replace with your Django backend endpoint for measurement list\n      axios.get('http://localhost:8000/api/measurements/').then(response => {\n        this.measurements = response.data;\n      }).catch(error => {\n        console.error('Error fetching measurements:', error);\n      });\n    },\n    getMetricValue(sensor, metric) {\n      // Find the measurement for the sensor and metric\n      const measurement = this.measurements.find(m => m.sensor_name === sensor.name && m.metric_name === metric.name && m.unit_name === this.getMetricUnit(metric));\n      if (measurement) {\n        return measurement.value;\n      } else {\n        return 'N/A';\n      }\n    },\n    getMetricUnit(metric) {\n      // Get the unit name for the metric\n      const unit = this.metrics.find(m => m.name === metric.name);\n      if (unit) {\n        return unit.unitName;\n      } else {\n        return 'N/A';\n      }\n    },\n    sortTable(column) {\n      // Sort the table by the selected column\n      if (column === 'name') {\n        this.sensors.sort((a, b) => a.name.localeCompare(b.name, undefined, {\n          sensitivity: 'base'\n        }));\n      } else {\n        const metric = this.metrics.find(m => m.name === column);\n        if (metric) {\n          this.measurements.sort((a, b) => {\n            const measurementA = a.values.find(v => v.metric_name === metric.name);\n            const measurementB = b.values.find(v => v.metric_name === metric.name);\n            if (measurementA && measurementB) {\n              return measurementA.value - measurementB.value;\n            } else {\n              return 0;\n            }\n          });\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","sensors","metrics","measurements","activeMetrics","searchSensorName","filterSensorType","mounted","fetchSensors","fetchMetrics","fetchMeasurements","computed","filteredSensors","filtered","filter","sensor","name","toLowerCase","includes","type","methods","get","then","response","catch","error","console","metric","selected","getMetricValue","measurement","find","m","sensor_name","metric_name","unit_name","getMetricUnit","value","unit","unitName","sortTable","column","sort","a","b","localeCompare","undefined","sensitivity","measurementA","values","v","measurementB"],"sources":["src/views/Table.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <h1>Sensor Measurements Table</h1>\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th @click=\"sortTable('name')\">Sensor Name</th>\r\n                    <th v-for=\"metric in activeMetrics\" :key=\"metric.id\">\r\n                        {{ metric.name }} ({{ getMetricUnit(metric) }})\r\n                    </th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr v-for=\"sensor in filteredSensors\" :key=\"sensor.id\">\r\n                    <td>{{ sensor.name }}</td>\r\n                    <td v-for=\"metric in activeMetrics\" :key=\"metric.id\">\r\n                        {{ getMetricValue(sensor, metric) }}\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n</template>\r\n  \r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n    data() {\r\n        return {\r\n            sensors: [],\r\n            metrics: [],\r\n            measurements: [],\r\n            activeMetrics: [],\r\n            searchSensorName: '',\r\n            filterSensorType: '',\r\n        };\r\n    },\r\n    mounted() {\r\n        // Fetch data from backend endpoints\r\n        this.fetchSensors();\r\n        this.fetchMetrics();\r\n        this.fetchMeasurements();\r\n    },\r\n    computed: {\r\n        filteredSensors() {\r\n            let filtered = this.sensors;\r\n            if (this.searchSensorName) {\r\n                filtered = filtered.filter(sensor =>\r\n                    sensor.name.toLowerCase().includes(this.searchSensorName.toLowerCase())\r\n                );\r\n            }\r\n            if (this.filterSensorType) {\r\n                filtered = filtered.filter(sensor =>\r\n                    sensor.type.toLowerCase() === this.filterSensorType.toLowerCase()\r\n                );\r\n            }\r\n            return filtered;\r\n        },\r\n    },\r\n    methods: {\r\n        fetchSensors() {\r\n            // Replace with your Django backend endpoint for sensor list\r\n            axios\r\n                .get('http://localhost:8000/api/sensors/')\r\n                .then(response => {\r\n                    this.sensors = response.data;\r\n                })\r\n                .catch(error => {\r\n                    console.error('Error fetching sensors:', error);\r\n                });\r\n        },\r\n        fetchMetrics() {\r\n            // Replace with your Django backend endpoint for metric list\r\n            axios\r\n                .get('http://localhost:8000/api/metrics/')\r\n                .then(response => {\r\n                    this.metrics = response.data;\r\n                    this.activeMetrics = response.data.filter(metric => metric.selected);\r\n                })\r\n                .catch(error => {\r\n                    console.error('Error fetching metrics:', error);\r\n                });\r\n        },\r\n        fetchMeasurements() {\r\n            // Replace with your Django backend endpoint for measurement list\r\n            axios\r\n                .get('http://localhost:8000/api/measurements/')\r\n                .then(response => {\r\n                    this.measurements = response.data;\r\n                })\r\n                .catch(error => {\r\n                    console.error('Error fetching measurements:', error);\r\n                });\r\n        },\r\n        getMetricValue(sensor, metric) {\r\n            // Find the measurement for the sensor and metric\r\n            const measurement = this.measurements.find(\r\n                m =>\r\n                    m.sensor_name === sensor.name &&\r\n                    m.metric_name === metric.name &&\r\n                    m.unit_name === this.getMetricUnit(metric)\r\n            );\r\n            if (measurement) {\r\n                return measurement.value;\r\n            } else {\r\n                return 'N/A';\r\n            }\r\n        },\r\n        getMetricUnit(metric) {\r\n            // Get the unit name for the metric\r\n            const unit = this.metrics.find(m => m.name === metric.name);\r\n            if (unit) {\r\n                return unit.unitName;\r\n            } else {\r\n                return 'N/A';\r\n            }\r\n        },\r\n        sortTable(column) {\r\n            // Sort the table by the selected column\r\n            if (column === 'name') {\r\n                this.sensors.sort((a, b) =>\r\n                    a.name.localeCompare(b.name, undefined, { sensitivity: 'base' }));\r\n            } else {\r\n                const metric = this.metrics.find(m => m.name === column);\r\n                if (metric) {\r\n                    this.measurements.sort((a, b) => {\r\n                        const measurementA = a.values.find(v => v.metric_name === metric.name);\r\n                        const measurementB = b.values.find(v => v.metric_name === metric.name);\r\n                        if (measurementA && measurementB) {\r\n                            return measurementA.value - measurementB.value;\r\n                        } else {\r\n                            return 0;\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        },\r\n    },\r\n};\r\n</script>\r\n<style scoped>\r\n/* Add your custom styles here */\r\n</style>\r\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}