{"ast":null,"code":"export default {\n  data() {\n    return {\n      sensors: [],\n      metrics: [],\n      measurements: []\n    };\n  },\n  mounted() {\n    // Fetch data from backend endpoints\n    this.fetchSensors();\n    this.fetchMetrics();\n    this.fetchMeasurements();\n  },\n  methods: {\n    fetchSensors() {\n      // Replace with your Django backend endpoint for sensor list\n      fetch('http://localhost:8000/api/sensors/').then(response => response.json()).then(data => this.sensors = data);\n    },\n    fetchMetrics() {\n      // Replace with your Django backend endpoint for metric list\n      fetch('http://localhost:8000/api/metrics/').then(response => response.json()).then(data => this.metrics = data);\n    },\n    fetchMeasurements() {\n      // Replace with your Django backend endpoint for measurement list\n      fetch('http://localhost:8000/api/measurements/').then(response => response.json()).then(data => this.measurements = data);\n    },\n    getMetricValue(sensor, metric) {\n      // Find the measurement for the sensor and metric\n      const measurement = this.measurements.find(m => m.sensor_name === sensor.name && m.metric_name === metric.name);\n      if (measurement) {\n        return measurement.value;\n      } else {\n        return 'N/A';\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","sensors","metrics","measurements","mounted","fetchSensors","fetchMetrics","fetchMeasurements","methods","fetch","then","response","json","getMetricValue","sensor","metric","measurement","find","m","sensor_name","name","metric_name","value"],"sources":["src/views/Table.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <h1>Sensor Measurements Table</h1>\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th>Sensor Name</th>\r\n                    <th v-for=\"metric in metrics\" :key=\"metric.id\">\r\n                        {{ metric.name }} ({{ metric.unitName }})\r\n                    </th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr v-for=\"sensor in sensors\" :key=\"sensor.id\">\r\n                    <td>{{ sensor.name }}</td>\r\n                    <td v-for=\"metric in metrics\" :key=\"metric.id\">\r\n                        {{ getMetricValue(sensor, metric) }}\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n</template>\r\n  \r\n<script>\r\nexport default {\r\n    data() {\r\n        return {\r\n            sensors: [],\r\n            metrics: [],\r\n            measurements: [],\r\n        };\r\n    },\r\n    mounted() {\r\n        // Fetch data from backend endpoints\r\n        this.fetchSensors();\r\n        this.fetchMetrics();\r\n        this.fetchMeasurements();\r\n    },\r\n    methods: {\r\n        fetchSensors() {\r\n            // Replace with your Django backend endpoint for sensor list\r\n            fetch('http://localhost:8000/api/sensors/')\r\n                .then(response => response.json())\r\n                .then(data => (this.sensors = data));\r\n        },\r\n        fetchMetrics() {\r\n            // Replace with your Django backend endpoint for metric list\r\n            fetch('http://localhost:8000/api/metrics/')\r\n                .then(response => response.json())\r\n                .then(data => (this.metrics = data));\r\n        },\r\n        fetchMeasurements() {\r\n            // Replace with your Django backend endpoint for measurement list\r\n            fetch('http://localhost:8000/api/measurements/')\r\n                .then(response => response.json())\r\n                .then(data => (this.measurements = data));\r\n        },\r\n        getMetricValue(sensor, metric) {\r\n            // Find the measurement for the sensor and metric\r\n            const measurement = this.measurements.find(\r\n                m =>\r\n                    m.sensor_name === sensor.name && m.metric_name === metric.name\r\n            );\r\n            if (measurement) {\r\n                return measurement.value;\r\n            } else {\r\n                return 'N/A';\r\n            }\r\n        },\r\n    },\r\n};\r\n</script>\r\n  "],"mappings":"AAyBA;EACAA,KAAA;IACA;MACAC,OAAA;MACAC,OAAA;MACAC,YAAA;IACA;EACA;EACAC,QAAA;IACA;IACA,KAAAC,YAAA;IACA,KAAAC,YAAA;IACA,KAAAC,iBAAA;EACA;EACAC,OAAA;IACAH,aAAA;MACA;MACAI,KAAA,uCACAC,IAAA,CAAAC,QAAA,IAAAA,QAAA,CAAAC,IAAA,IACAF,IAAA,CAAAV,IAAA,SAAAC,OAAA,GAAAD,IAAA;IACA;IACAM,aAAA;MACA;MACAG,KAAA,uCACAC,IAAA,CAAAC,QAAA,IAAAA,QAAA,CAAAC,IAAA,IACAF,IAAA,CAAAV,IAAA,SAAAE,OAAA,GAAAF,IAAA;IACA;IACAO,kBAAA;MACA;MACAE,KAAA,4CACAC,IAAA,CAAAC,QAAA,IAAAA,QAAA,CAAAC,IAAA,IACAF,IAAA,CAAAV,IAAA,SAAAG,YAAA,GAAAH,IAAA;IACA;IACAa,eAAAC,MAAA,EAAAC,MAAA;MACA;MACA,MAAAC,WAAA,QAAAb,YAAA,CAAAc,IAAA,CACAC,CAAA,IACAA,CAAA,CAAAC,WAAA,KAAAL,MAAA,CAAAM,IAAA,IAAAF,CAAA,CAAAG,WAAA,KAAAN,MAAA,CAAAK,IAAA,CACA;MACA,IAAAJ,WAAA;QACA,OAAAA,WAAA,CAAAM,KAAA;MACA;QACA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}